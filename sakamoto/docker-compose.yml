networks:
  homelab:
    driver: bridge
volumes:
  model-cache:

services:
  # blinko:
  #   image: "blinkospace/blinko:latest"
  #   labels:
  #     - com.centurylinklabs.watchtower.enable=true
  #     - homepage.group=文章
  #     - homepage.name=blinko
  #     - homepage.icon=https://cdn.jsdelivr.net/gh/alist-org/logo@main/logo.svg
  #     - homepage.href=http://${DEPLOY_HOST:-127.0.0.1}:5230
  #     - homepage.instance.public.href=https://blinko.${HOME_DOMAIN}
  #     - homepage.description=笔记替代
  #     # - "traefik.http.routers.blinko.service=blinko"
  #     # - "traefik.http.routers.blinko.rule=Host(`blinko.${HOME_DOMAIN}`)"
  #     # - "traefik.enable=true"
  #     # - "traefik.http.routers.blinko.entrypoints=https"
  #     # - "traefik.http.routers.blinko.tls=true"
  #     # - "traefik.http.routers.blinko.tls.certresolver=myresolver"
  #     # - "traefik.http.routers.blinko.tls.domains[0].main=${HOME_DOMAIN}"
  #     # - "traefik.http.routers.blinko.tls.domains[0].sans=*.${HOME_DOMAIN}"
  #   container_name: blinko
  #   networks:
  #     - homelab
  #   depends_on:
  #     blinko-postgres:
  #       condition: service_healthy
  #   environment:
  #     TZ: Asia/Shanghai
  #     NODE_ENV: production
  #     # NEXTAUTH_URL: http://localhost:1111
  #     # NEXT_PUBLIC_BASE_URL: http://localhost:1111
  #     NEXTAUTH_SECRET: my_ultra_secure_nextauth_secret
  #     DATABASE_URL: postgresql://postgres:${BLINKO_POSTGRES_PASSWORD}@blinko-postgres:5432/postgres
  #   ports:
  #     - "5230:1111"
  #   restart: unless-stopped
  #   logging:
  #     options:
  #       max-size: "10m"
  #       max-file: "3"
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://blinko:1111/"]
  #     interval: 30s 
  #     timeout: 10s   
  #     retries: 5     
  #     start_period: 30s 
  #   deploy:
  #     replicas: 0
  #     update_config:
  #       parallelism: 1
  #       delay: 3s
  #       order: stop-first
  #     restart_policy:
  #       condition: on-failure
  #       max_attempts: 1
  # blinko-postgres:
  #   image: postgres:14
  #   container_name: blinko-postgres
  #   restart: unless-stopped
  #   # ports:
  #   #   - 5435:5432
  #   networks:
  #     - homelab
  #   environment:
  #     POSTGRES_DB: postgres
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: ${BLINKO_POSTGRES_PASSWORD}
  #     TZ: Asia/Shanghai
  #   # Persisting container data
  #   # Make sure you have enough permissions.
  #   volumes:
  #     - "${BLINKO_DATA_DIR}:/var/lib/postgresql/data"
  #   healthcheck:
  #     test:
  #       ["CMD", "pg_isready", "-U", "postgres", "-d", "postgres"]
  #     interval: 5s
  #     timeout: 10s
  #     retries: 5
  # seafile-mysql:
  #   image: ${SEAFILE_DB_IMAGE:-docker.seafile.top/seafileltd/mariadb:10.11}
  #   container_name: seafile-mysql
  #   restart: unless-stopped
  #   networks:
  #     - homelab
  #   environment:
  #     - MYSQL_ROOT_PASSWORD=${INIT_SEAFILE_MYSQL_ROOT_PASSWORD:-}
  #     - MYSQL_LOG_CONSOLE=true
  #     - MARIADB_AUTO_UPGRADE=1
  #   volumes:
  #     - "${SEAFILE_MYSQL_VOLUME:-/opt/seafile-mysql/db}:/var/lib/mysql"
  #   ports:
  #     - "${SEAFILE_EXPOSE_MYSQL_DB_PORT:-4306}:3306"
  #   healthcheck:
  #     test:
  #       [
  #         "CMD",
  #         "/usr/local/bin/healthcheck.sh",
  #         "--connect",
  #         "--mariadbupgrade",
  #         "--innodb_initialized",
  #       ]
  #     interval: 20s
  #     start_period: 30s
  #     timeout: 5s
  #     retries: 10
  #   deploy:
  #     replicas: ${ENABLE_SEAFILE:-1}
  #     update_config:
  #       parallelism: 1
  #       delay: 3s
  #       order: stop-first
  #     restart_policy:
  #       condition: on-failure
  #       max_attempts: 1

  # memcached:
  #   image: ${SEAFILE_MEMCACHED_IMAGE:-docker.seafile.top/seafileltd/memcached:1.6.29}
  #   container_name: seafile-memcached
  #   restart: unless-stopped
  #   networks:
  #     - homelab
  #   entrypoint: memcached -m 256
  #   deploy:
  #     replicas: ${ENABLE_SEAFILE:-1}
  # seafile:
  #   image: ${SEAFILE_IMAGE:-docker.seafile.top/seafileltd/seafile-pro-mc:12.0-latest}
  #   container_name: seafile
  #   restart: unless-stopped
  #   networks:
  #     - homelab
  #   ports:
  #     - "4444:80"
  #   volumes:
  #     - ${SEAFILE_VOLUME:-/opt/seafile-data}:/shared
  #   environment:
  #     - DB_HOST=${SEAFILE_MYSQL_DB_HOST:-db}
  #     - DB_PORT=${SEAFILE_MYSQL_DB_PORT:-3306}
  #     - DB_USER=${SEAFILE_MYSQL_DB_USER:-seafile}
  #     - DB_ROOT_PASSWD=${INIT_SEAFILE_MYSQL_ROOT_PASSWORD:-}
  #     - DB_PASSWORD=${SEAFILE_MYSQL_DB_PASSWORD:?Variable is not set or empty}
  #     - SEAFILE_MYSQL_DB_CCNET_DB_NAME=${SEAFILE_MYSQL_DB_CCNET_DB_NAME:-ccnet_db}
  #     - SEAFILE_MYSQL_DB_SEAFILE_DB_NAME=${SEAFILE_MYSQL_DB_SEAFILE_DB_NAME:-seafile_db}
  #     - SEAFILE_MYSQL_DB_SEAHUB_DB_NAME=${SEAFILE_MYSQL_DB_SEAHUB_DB_NAME:-seahub_db}
  #     - TIME_ZONE=${TIME_ZONE:-Etc/UTC}
  #     - INIT_SEAFILE_ADMIN_EMAIL=${INIT_SEAFILE_ADMIN_EMAIL:-me@example.com}
  #     - INIT_SEAFILE_ADMIN_PASSWORD=${INIT_SEAFILE_ADMIN_PASSWORD:-asecret}
  #     - SEAFILE_SERVER_HOSTNAME=${SEAFILE_SERVER_HOSTNAME:?Variable is not set or empty}
  #     - SEAFILE_SERVER_PROTOCOL=${SEAFILE_SERVER_PROTOCOL:-http}
  #     - SITE_ROOT=${SITE_ROOT:-/}
  #     - NON_ROOT=${NON_ROOT:-false}
  #     - JWT_PRIVATE_KEY=${JWT_PRIVATE_KEY:?Variable is not set or empty}
  #     - SEAFILE_LOG_TO_STDOUT=${SEAFILE_LOG_TO_STDOUT:-false}
  #     - ENABLE_SEADOC=${ENABLE_SEADOC:-true}
  #     - SEADOC_SERVER_URL=${SEAFILE_SERVER_PROTOCOL:-http}://${SEAFILE_SERVER_HOSTNAME:?Variable is not set or empty}/sdoc-server
  #     - INIT_S3_STORAGE_BACKEND_CONFIG=${INIT_S3_STORAGE_BACKEND_CONFIG:-false}
  #     - INIT_S3_COMMIT_BUCKET=${INIT_S3_COMMIT_BUCKET:-}
  #     - INIT_S3_FS_BUCKET=${INIT_S3_FS_BUCKET:-}
  #     - INIT_S3_BLOCK_BUCKET=${INIT_S3_BLOCK_BUCKET:-}
  #     - INIT_S3_KEY_ID=${INIT_S3_KEY_ID:-}
  #     - INIT_S3_SECRET_KEY=${INIT_S3_SECRET_KEY:-}
  #     - INIT_S3_USE_V4_SIGNATURE=${INIT_S3_USE_V4_SIGNATURE:-true}
  #     - INIT_S3_AWS_REGION=${INIT_S3_AWS_REGION:-us-east-1}
  #     - INIT_S3_HOST=${INIT_S3_HOST:-us-east-1}
  #     - INIT_S3_USE_HTTPS=${INIT_S3_USE_HTTPS:-true}
  #   depends_on:
  #     seafile-mysql:
  #       condition: service_healthy
  #     memcached:
  #       condition: service_started
  #   deploy:
  #     replicas: ${ENABLE_SEAFILE:-1}

  immich-server:
    container_name: immich-server
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    # extends:
    #   file: hwaccel.transcoding.yml
    #   service: cpu # set to one of [nvenc, quicksync, rkmpp, vaapi, vaapi-wsl] for accelerated transcoding
    volumes:
      # Do not edit the next line. If you want to change the media storage location on your system, edit the value of UPLOAD_LOCATION in the .env file
      - ${IMMICH_DATA_DIR}:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
    environment:
      - TZ=Asia/Shanghai
      - DB_PASSWORD=${IMMICH_DB_PASSWORD}
      - DB_USERNAME=${IMMICH_DB_USERNAME}
      - DB_DATABASE_NAME=${IMMICH_DB_DATABASE_NAME}
    ports:
      - '2283:2283'
    depends_on:
      - immich-redis
      - immich-postgres
    restart: unless-stopped
    healthcheck:
      disable: false
    deploy:
      replicas: ${ENABLE_IMMICH:-1}

  immich-machine-learning:
    container_name: immich-machine-learning
    # For hardware acceleration, add one of -[armnn, cuda, rocm, openvino, rknn] to the image tag.
    # Example tag: ${IMMICH_VERSION:-release}-cuda
    image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}
    # extends: # uncomment this section for hardware acceleration - see https://immich.app/docs/features/ml-hardware-acceleration
    #   file: hwaccel.ml.yml
    #   service: cpu # set to one of [armnn, cuda, rocm, openvino, openvino-wsl, rknn] for accelerated inference - use the `-wsl` version for WSL2 where applicable
    volumes:
      - model-cache:/cache
    environment:
      - TZ=Asia/Shanghai
    restart: unless-stopped
    healthcheck:
      disable: false
    deploy:
      replicas: ${ENABLE_IMMICH:-1}

  immich-redis:
    container_name: immich-redis
    image: valkey/valkey:8-bookworm@sha256:ff21bc0f8194dc9c105b769aeabf9585fea6a8ed649c0781caeac5cb3c247884
    healthcheck:
      test: redis-cli ping || exit 1
    restart: unless-stopped
    deploy:
      replicas: ${ENABLE_IMMICH:-1}

  immich-postgres:
    container_name: immich-postgres
    image: ghcr.io/immich-app/postgres:14-vectorchord0.3.0-pgvectors0.2.0@sha256:fa4f6e0971f454cd95fec5a9aaed2ed93d8f46725cc6bc61e0698e97dba96da1
    environment:
      POSTGRES_PASSWORD: ${IMMICH_DB_PASSWORD}
      POSTGRES_USER: ${IMMICH_DB_USERNAME}
      POSTGRES_DB: ${IMMICH_DB_DATABASE_NAME}
      POSTGRES_INITDB_ARGS: '--data-checksums'
      # Uncomment the DB_STORAGE_TYPE: 'HDD' var if your database isn't stored on SSDs
      # DB_STORAGE_TYPE: 'HDD'
    volumes:
      # Do not edit the next line. If you want to change the database storage location on your system, edit the value of DB_DATA_LOCATION in the .env file
      - ${IMMICH_DB_DATA_DIR}:/var/lib/postgresql/data
    restart: unless-stopped
    deploy:
      replicas: ${ENABLE_IMMICH:-1}